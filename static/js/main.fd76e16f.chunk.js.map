{"version":3,"sources":["utils/Api.js","components/SearchForm.js","components/Header.js","components/RenderedResult.js","components/EmpDirectoryContainer.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","SearchForm","handleSearchEvent","className","id","type","placeholder","aria-label","onChange","Header","RenderedResult","props","key","data-th","alt","firstName","src","icon","lastName","email","phone","dob","substring","EmpDirectoryContainer","state","search","results","filteredResults","order","sorted","handleNameSort","event","setState","compareFunction","a","b","name","first","localeCompare","sortedUsers","sort","handleDOBSort","date","handleInputChange","target","value","searchEmp","filter","toLowerCase","includes","last","API","then","res","data","catch","err","console","log","this","label","style","width","onClick","aria-hidden","map","employee","login","uuid","picture","medium","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.fd76e16f.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default {\r\n    getEmployeeList : function() {\r\n        return axios.get(\"https://randomuser.me/api/?results=10\");\r\n    }\r\n\r\n}","import React from \"react\";\r\n\r\nfunction SearchForm({ handleSearchEvent }) {\r\n  return (\r\n    <div className=\"searchbox d-flex justify-content-center\">\r\n      <form className=\"form-inline\">\r\n      <div className=\"input-group-prepend\">\r\n            <span className=\"input-group-text\" id=\"\">\r\n              Search\r\n            </span>\r\n          </div>\r\n        <input\r\n          className=\"form-control mr-sm-2\"\r\n          type=\"search\"\r\n          placeholder=\"Search\"\r\n          aria-label=\"Search\"\r\n          onChange={handleSearchEvent}\r\n        />\r\n       \r\n      </form>\r\n    </div>\r\n  );\r\n}\r\nexport default SearchForm;","import React from 'react';\r\nimport \"../Style/Header.css\";\r\n\r\nfunction Header () {\r\n    return (\r\n      <div className=\"header\">\r\n        <h1>Employee Directory</h1>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  export default Header;","import React from \"react\";\r\nimport \"../Style/RenderedResult.css\";\r\nimport Moment from \"moment\";\r\n\r\nconst RenderedResult = (props, key) => {\r\n\r\n return (\r\n  <tbody>\r\n    <tr key={key}>\r\n      <td data-th=\"Image\" className=\"align-middle\">\r\n        <img alt={props.firstName} src={props.icon} className=\"img-responsive\" />\r\n      </td>\r\n      <td data-th=\"Name\" className=\"name-cell align-middle\">{props.firstName} {props.lastName}</td>\r\n      <td data-th=\"Email\" className=\"align-middle\" >{props.email}</td>\r\n      <td data-th=\"Phone\" className=\"align-middle\">{props.phone} </td>\r\n      <td data-th=\"DOB\" className=\"align-middle\">{props.dob.substring(0,10)}</td>\r\n    </tr>\r\n    </tbody>\r\n    \r\n\r\n  )\r\n\r\n}\r\n\r\nexport default RenderedResult;","import React, { Component } from \"react\";\r\nimport API from \"../utils/Api\";\r\nimport Alert from \"./Alert\";\r\nimport SearchForm from \"./SearchForm\";\r\nimport Header from \"./Header\";\r\nimport RenderedResult from \"./RenderedResult\";\r\n\r\nclass EmpDirectoryContainer extends Component {\r\n  state = {\r\n    search: \"\",\r\n    results: [],\r\n    filteredResults: [],\r\n    order: \"descending\",\r\n    sorted: false\r\n  }\r\n\r\n   handleNameSort = event => {\r\n    if (this.state.order === \"descending\") {\r\n      this.setState({\r\n        order: \"ascending\"\r\n      })\r\n    } else {\r\n      this.setState({\r\n        order: \"descending\"\r\n      })\r\n    }\r\n\r\n    const compareFunction = (a, b) => {\r\n      if (this.state.order === \"ascending\") {\r\n          return a.name.first.localeCompare(b.name.first);\r\n        } \r\n      else {\r\n          return b.name.first.localeCompare(a.name.first);\r\n      }\r\n\r\n    }\r\nif(!this.state.sorted){\r\n  const sortedUsers = this.state.results.sort(compareFunction);\r\n  this.setState({ results: sortedUsers });\r\n}\r\nelse {\r\n  const sortedUsers = this.state.filteredResults.sort(compareFunction);\r\n  this.setState({ filteredResults: sortedUsers });\r\n}\r\n   \r\n  }\r\n\r\n\r\n  handleDOBSort = event => {\r\n    if (this.state.order === \"descending\") {\r\n      this.setState({\r\n        order: \"ascending\"\r\n      })\r\n    } else {\r\n      this.setState({\r\n        order: \"descending\"\r\n      })\r\n    }\r\n\r\n    const compareDobFunction = (a, b) => {\r\n      if (this.state.order === \"ascending\") {\r\n          return a.dob.date.localeCompare(b.dob.date);\r\n        } \r\n      else {\r\n          return b.dob.date.localeCompare(a.dob.date);\r\n      }\r\n\r\n    }\r\n  const sortedUsers = this.state.results.sort(compareDobFunction);\r\n  this.setState({ results: sortedUsers });\r\n}\r\ncomponentDidMount() {\r\n    API.getEmployeeList()\r\n      .then(res => this.setState({ results: res.data.results }))\r\n      .catch(err => console.log(err));\r\n  }\r\n  handleInputChange = event => {\r\n    this.setState({ search: event.target.value });\r\n  };\r\n \r\n  searchEmp = () => {\r\n    let { results, search } = this.state;\r\n    let filteredResults = results.filter(sorted => {\r\n      return (\r\n        sorted.name.first.toLowerCase().includes(search.toLowerCase()) ||\r\n        sorted.name.last.toLowerCase().includes(search.toLowerCase()) \r\n      )\r\n    })\r\n    this.setState({ filteredResults })\r\n  }\r\n\r\n  handleSearchEvent = event => {\r\n    this.setState({ search: event.target.value }, () => {\r\n      this.searchEmp();\r\n      this.setState({ sorted: true });\r\n    });\r\n  };\r\nrender() {\r\n    return (\r\n    <div>\r\n      <Header />\r\n      {/* <Alert /> */}\r\n      <SearchForm\r\n        name=\"search\"\r\n        handleSearchEvent={this.handleSearchEvent}\r\n        label=\"Search\"\r\n      />\r\n\r\n<div className=\"container mt-5\">\r\n      <table className=\"table table-striped table-hover table-condensed\">\r\n        <thead className=\"thead\">\r\n          <tr>\r\n            <th className=\"col\"  style={{width: \"10%\"}}>Image</th>\r\n            <th className=\"col\" key = \"Name\"  style={{width: \"15%\"}} onClick = {this.handleNameSort}>Name  <i className=\"fa fa-sort\" aria-hidden=\"true\"></i></th>\r\n            <th className=\"col\"  style={{width: \"20%\"}}>Email</th>\r\n            <th className=\"col\"  style={{width: \"20%\"}}>Phone</th>\r\n            <th className=\"col\" key = \"DOB\" style={{width: \"20%\"}} onClick = {this.handleDOBSort}>DOB<i className=\"fa fa-sort\" aria-hidden=\"true\"></i></th>\r\n          </tr>\r\n        </thead>\r\n      {/* if it's not sorted, map accordingly */}\r\n        {!this.state.sorted ? this.state.results.map(employee => (\r\n        \r\n          < RenderedResult\r\n            key={employee.login.uuid}\r\n            firstName={employee.name.first}\r\n            lastName={employee.name.last}\r\n            phone={employee.phone}  \r\n            email={employee.email}\r\n            icon={employee.picture.medium}\r\n            dob={employee.dob.date}\r\n          />\r\n       \r\n        ))\r\n          // otherwise map the sorted employees\r\n          : this.state.filteredResults.map(employee => (\r\n\r\n            < RenderedResult\r\n            key={employee.login.uuid}\r\n            firstName={employee.name.first}\r\n            lastName={employee.name.last}\r\n            phone={employee.phone}\r\n            email={employee.email}\r\n            icon={employee.picture.medium}\r\n            dob={employee.dob.date}\r\n          />\r\n          ))}\r\n          </table>\r\n          </div>\r\n      </div>\r\n\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default EmpDirectoryContainer;","import React from 'react';\nimport './App.css';\nimport EmpDirectoryContainer from \"./components/EmpDirectoryContainer\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <EmpDirectoryContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}